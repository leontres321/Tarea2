// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FTPClient is the client API for FTP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FTPClient interface {
	Enviar(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*Respuesta, error)
}

type fTPClient struct {
	cc grpc.ClientConnInterface
}

func NewFTPClient(cc grpc.ClientConnInterface) FTPClient {
	return &fTPClient{cc}
}

func (c *fTPClient) Enviar(ctx context.Context, in *Chunk, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, "/ftp.FTP/Enviar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FTPServer is the server API for FTP service.
// All implementations must embed UnimplementedFTPServer
// for forward compatibility
type FTPServer interface {
	Enviar(context.Context, *Chunk) (*Respuesta, error)
	mustEmbedUnimplementedFTPServer()
}

// UnimplementedFTPServer must be embedded to have forward compatible implementations.
type UnimplementedFTPServer struct {
}

func (UnimplementedFTPServer) Enviar(context.Context, *Chunk) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enviar not implemented")
}
func (UnimplementedFTPServer) mustEmbedUnimplementedFTPServer() {}

// UnsafeFTPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FTPServer will
// result in compilation errors.
type UnsafeFTPServer interface {
	mustEmbedUnimplementedFTPServer()
}

func RegisterFTPServer(s grpc.ServiceRegistrar, srv FTPServer) {
	s.RegisterService(&_FTP_serviceDesc, srv)
}

func _FTP_Enviar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FTPServer).Enviar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ftp.FTP/Enviar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FTPServer).Enviar(ctx, req.(*Chunk))
	}
	return interceptor(ctx, in, info, handler)
}

var _FTP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ftp.FTP",
	HandlerType: (*FTPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enviar",
			Handler:    _FTP_Enviar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ftp.proto",
}
